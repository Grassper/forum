type Mutation {
  incrementLikePostUserMetrics(id: ID!): UserMetrics
  decrementLikePostUserMetrics(id: ID!): UserMetrics
  incrementLovePostUserMetrics(id: ID!): UserMetrics
  decrementLovePostUserMetrics(id: ID!): UserMetrics
  incrementSupportPostUserMetrics(id: ID!): UserMetrics
  decrementSupportPostUserMetrics(id: ID!): UserMetrics
  incrementDislikePostUserMetrics(id: ID!): UserMetrics
  decrementDislikePostUserMetrics(id: ID!): UserMetrics
  incrementProfileViewUserMetrics(id: ID!): UserMetrics
  decrementProfileViewUserMetrics(id: ID!): UserMetrics
  incrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
  decrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
  incrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
  decrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
  incrementActiveDayUserMetrics(id: ID!): UserMetrics
  decrementActiveDayUserMetrics(id: ID!): UserMetrics
}

type User @model {
  id: ID!
  username: String!
  email: String!
  coins: Int!
  followers: [FollowRelationship]
    @connection(keyName: "byFolloweeId", fields: ["id"])
  followees: [FollowRelationship]
    @connection(keyName: "byFollowerId", fields: ["id"])
  communities: [UserCommunityRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  moderatingCommunities: [ModeratorCommunityRelationShip]
    @connection(keyName: "byModerator", fields: ["id"])
  posts: [Post] @connection(keyName: "byAuthor", fields: ["id"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
}

type UserMetrics @model {
  id: ID!
  postLikes: Int!
  postLoves: Int!
  postSupports: Int!
  postDislikes: Int!
  profileViews: Int!
  badges: [String]
  commentUpvotes: Int!
  commentDownvotes: Int!
  activeDays: Int!
  lastActiveDay: AWSDate!
  User: User @connection
}

type FollowRelationship
  @model
  @key(
    name: "byFollowerId"
    fields: ["followerId"]
    queryField: "followeesByFollowerId"
  )
  @key(
    name: "byFolloweeId"
    fields: ["followeeId"]
    queryField: "followersByFolloweeId"
  ) {
  id: ID!
  followeeId: ID!
  followerId: ID!
  followee: User! @connection(fields: ["followeeId"])
  follower: User! @connection(fields: ["followerId"])
}

enum CommunityType {
  PUBLIC
  PRIVATE
}

type Community @model {
  id: ID!
  name: String!
  description: String!
  bannerImageUrl: AWSURL!
  profileImageUrl: AWSURL!
  type: CommunityType!
  creatorId: ID!
  creator: User! @connection(fields: ["creatorId"])
  posts: [Post] @connection(keyName: "byCommunity", fields: ["id"])
  members: [UserCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
  moderators: [ModeratorCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
}

type UserCommunityRelationShip
  @model(queries: null)
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  userId: ID!
  communityId: ID!
  user: User! @connection(fields: ["userId"])
  community: Community! @connection(fields: ["communityId"])
}

type ModeratorCommunityRelationShip
  @model(queries: null)
  @key(name: "byModerator", fields: ["moderatorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  moderatorId: ID!
  communityId: ID!
  user: User! @connection(fields: ["moderatorId"])
  community: Community! @connection(fields: ["communityId"])
}

enum PostType {
  TEXT
  AUDIO
  VIDEO
  IMAGE
  POLL
}

type Poll {
  id: ID!
  content: String!
  votes: Int!
}

type Post
  @model
  @key(name: "byAuthor", fields: ["authorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  type: PostType!
  content: String!
  mediaUrl: AWSURL
  poll: [Poll]
  likes: Int
  loves: Int
  supports: Int
  disLikes: Int
  authorId: ID!
  communityId: ID!
  author: User! @connection(fields: ["authorId"])
  community: Community! @connection(fields: ["communityId"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byPost", fields: ["id"])
}

type UserPostMetricsRelationShip
  @model
  @key(name: "byPost", fields: ["postId", "type", "userId"])
  @key(name: "byUser", fields: ["userId", "type", "postId"]) {
  id: ID!
  postId: ID!
  type: String!
  userId: ID!
  post: Post @connection(fields: ["postId"])
  user: User! @connection(fields: ["userId"])
}
