type Mutation {
  incrementLikePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementLikePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementLovePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementLovePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementSupportPostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementSupportPostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementDislikePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementDislikePostUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementProfileViewUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementProfileViewUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  decrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  incrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  decrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  incrementActiveDayUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementActiveDayUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementFollowersUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementFollowersUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementFollowingUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementFollowingUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementTotalPostsUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  decrementTotalPostsUserMetrics(id: ID!): UserMetrics @aws_cognito_user_pools
  incrementTotalCommentsUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  decrementTotalCommentsUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  incrementCommunitiesJoinedUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  decrementCommunitiesJoinedUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  incrementCommunitiesModeratingUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  decrementCommunitiesModeratingUserMetrics(id: ID!): UserMetrics
    @aws_cognito_user_pools
  incrementRepliesCount(id: ID!): Comment @aws_cognito_user_pools
  decrementRepliesCount(id: ID!): Comment @aws_cognito_user_pools
  incrementPostLikes(id: ID!): Post @aws_cognito_user_pools
  decrementPostLikes(id: ID!): Post @aws_cognito_user_pools
  incrementPostLoves(id: ID!): Post @aws_cognito_user_pools
  decrementPostLoves(id: ID!): Post @aws_cognito_user_pools
  incrementPostSupports(id: ID!): Post @aws_cognito_user_pools
  decrementPostSupports(id: ID!): Post @aws_cognito_user_pools
  incrementPostDislikes(id: ID!): Post @aws_cognito_user_pools
  decrementPostDislikes(id: ID!): Post @aws_cognito_user_pools
  incrementCommentUpvote(id: ID!): Comment @aws_cognito_user_pools
  decrementCommentUpvote(id: ID!): Comment @aws_cognito_user_pools
  incrementCommentDownvote(id: ID!): Comment @aws_cognito_user_pools
  decrementCommentDownvote(id: ID!): Comment @aws_cognito_user_pools
  incrementTotalPostsCommunity(id: ID!): Community @aws_cognito_user_pools
  decrementTotalPostsCommunity(id: ID!): Community @aws_cognito_user_pools
  incrementTotalMembersCommunity(id: ID!): Community @aws_cognito_user_pools
  decrementTotalMembersCommunity(id: ID!): Community @aws_cognito_user_pools
  incrementTotalCommentsCommunity(id: ID!): Community @aws_cognito_user_pools
  decrementTotalCommentsCommunity(id: ID!): Community @aws_cognito_user_pools
  incrementTotalModeratorsCommunity(id: ID!): Community @aws_cognito_user_pools
  decrementTotalModeratorsCommunity(id: ID!): Community @aws_cognito_user_pools
  createPostAndTimeline(
    type: PostType!
    content: String!
    mediaS3Key: String
    poll: [PollInput]
    tags: [String!]!
    authorId: ID!
    communityId: ID!
    postedDate: AWSDateTime!
  ): Post
    @function(name: "createPostAndTimeline-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
}

type User
  @model
  @auth(
    rules: [
      # allow all authenticated users ability to create posts
      # allow owners ability to update and delete their posts
      { allow: owner }
      # allow all authenticated users to read posts
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  profileImageUrl: String
  about: String
  email: String!
  coins: Int!
  followers: [FollowRelationship]
    @connection(keyName: "byFolloweeId", fields: ["id"])
  followees: [FollowRelationship]
    @connection(keyName: "byFollowerId", fields: ["id"])
  communities: [UserCommunityRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  moderatingCommunities: [ModeratorCommunityRelationShip]
    @connection(keyName: "byModerator", fields: ["id"])
  posts: [Post] @connection(keyName: "byAuthor", fields: ["id"])
  comments: [Comment] @connection(keyName: "byAuthor", fields: ["id"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  userCommentMetric: [UserCommentMetricsRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  chatRooms: [UserChatRoomRelationship]
    @connection(keyName: "byUser", fields: ["id"])
  userMetrics: UserMetrics @connection(fields: ["id"])
  timeLine: [Timeline] @connection(keyName: "byUser", fields: ["id"])
}

type UserMetrics
  @model
  @auth(
    rules: [{ allow: owner }, { allow: private, operations: [read, update] }]
  ) {
  id: ID! # id of user and usermetric are same
  postLikes: Int!
  postLoves: Int!
  postSupports: Int!
  postDislikes: Int!
  profileViews: Int!
  badges: [String]
  commentUpvotes: Int!
  commentDownvotes: Int!
  followers: Int!
  following: Int!
  totalPosts: Int!
  totalComments: Int!
  communitiesJoined: Int!
  communitiesModerating: Int!
  activeDays: Int!
  lastActiveDay: AWSDateTime!
  User: User! @connection(fields: ["id"])
}

type FollowRelationship
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(
    name: "byFollowerId"
    fields: ["followerId"]
    queryField: "followeesByFollowerId"
  )
  @key(
    name: "byFolloweeId"
    fields: ["followeeId"]
    queryField: "followersByFolloweeId"
  ) {
  id: ID!
  followeeId: ID!
  followerId: ID!
  isDeleted: Boolean
  followee: User! @connection(fields: ["followeeId"])
  follower: User! @connection(fields: ["followerId"])
}

enum CommunityType {
  PUBLIC
  PRIVATE
}

type Community
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) {
  id: ID!
  name: String!
  description: String!
  bannerImageS3Key: String!
  profileImageS3Key: String!
  type: CommunityType!
  creatorId: ID!
  totalPosts: Int!
  totalMembers: Int!
  totalComments: Int!
  totalModerators: Int!
  creator: User! @connection(fields: ["creatorId"])
  posts: [Post] @connection(keyName: "byCommunity", fields: ["id"])
  members: [UserCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
  moderators: [ModeratorCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
}

type UserCommunityRelationShip
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [read] }
    ]
  )
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  userId: ID!
  communityId: ID!
  isDeleted: Boolean
  user: User! @connection(fields: ["userId"])
  community: Community! @connection(fields: ["communityId"])
}

type ModeratorCommunityRelationShip
  @model(queries: null)
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(name: "byModerator", fields: ["moderatorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  moderatorId: ID!
  communityId: ID!
  isDeleted: Boolean
  user: User! @connection(fields: ["moderatorId"])
  community: Community! @connection(fields: ["communityId"])
}

enum PostType {
  TEXT
  AUDIO
  VIDEO
  IMAGE
  POLL
}

input PollInput {
  id: ID!
  content: String!
  votes: Int!
}

type Poll {
  id: ID!
  content: String!
  votes: Int!
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [create, read] }
    ]
  )
  @key(name: "byAuthor", fields: ["authorId", "postedDate"])
  @key(name: "byCommunity", fields: ["communityId", "postedDate"]) {
  id: ID!
  type: PostType!
  content: String!
  mediaS3Key: String
  poll: [Poll]
  tags: [String!]!
  likes: Int!
  loves: Int!
  supports: Int!
  disLikes: Int!
  authorId: ID!
  communityId: ID!
  postedDate: AWSDateTime!
  author: User! @connection(fields: ["authorId"])
  community: Community! @connection(fields: ["communityId"])
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byPost", fields: ["id"])
}

enum PostUserActionType {
  LIKE
  LOVE
  SUPPORT
  DISLIKE
}

type UserPostMetricsRelationShip
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(name: "byPost", fields: ["postId", "userId"])
  @key(name: "byUser", fields: ["userId", "postId"]) {
  id: ID!
  postId: ID!
  type: PostUserActionType!
  communityId: ID!
  userId: ID!
  isDeleted: Boolean
  community: Community! @connection(fields: ["communityId"])
  post: Post! @connection(fields: ["postId"])
  user: User! @connection(fields: ["userId"])
}

type Comment
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(name: "byPost", fields: ["postId", "commentedDate"])
  @key(name: "byAuthor", fields: ["authorId", "commentedDate"])
  @key(name: "byCommunity", fields: ["communityId", "commentedDate"]) {
  id: ID!
  content: String!
  postId: ID!
  communityId: ID!
  authorId: ID!
  upvote: Int!
  downvote: Int!
  repliesCount: Int!
  commentedDate: AWSDateTime!
  post: Post! @connection(fields: ["postId"])
  author: User! @connection(fields: ["authorId"])
  community: Community! @connection(fields: ["communityId"])
  userCommentMetric: [UserCommentMetricsRelationShip]
    @connection(keyName: "byComment", fields: ["id"])
}

type ParentChildCommentRelationship
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(
    name: "byParentComment"
    fields: ["parentCommentId"]
    queryField: "childCommentsByParentCommentId"
  )
  @key(
    name: "byChildComment"
    fields: ["childCommentId"]
    queryField: "parentCommentByChildCommentId"
  )
  @key(name: "byPost", fields: ["postId"], queryField: "commentByPostId") {
  id: ID!
  parentCommentId: ID
  childCommentId: ID!
  postId: ID!
  parentComment: Comment @connection(fields: ["parentCommentId"])
  childComment: Comment! @connection(fields: ["childCommentId"])
  post: Post @connection(fields: ["postId"])
}

enum CommentUserActionType {
  UPVOTE
  DOWNVOTE
}

type UserCommentMetricsRelationShip
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(name: "byUser", fields: ["userId", "commentId"])
  @key(name: "byComment", fields: ["commentId", "userId"]) {
  id: ID!
  type: CommentUserActionType!
  userId: ID!
  postId: ID!
  commentId: ID!
  communityId: ID!
  isDeleted: Boolean
  post: Post! @connection(fields: ["postId"])
  user: User! @connection(fields: ["userId"])
  comment: Comment! @connection(fields: ["commentId"])
  community: Community! @connection(fields: ["communityId"])
}

type UserChatRoomRelationship
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(name: "byChatRoom", fields: ["chatRoomId", "userId"])
  @key(name: "byUser", fields: ["userId", "chatRoomId"]) {
  id: ID!
  userId: ID!
  chatRoomId: ID!
  user: User @connection(fields: ["userId"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomId"])
}

type ChatRoom
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }]) { # allow only people in the chat room to read
  id: ID!
  users: [UserChatRoomRelationship]
    @connection(keyName: "byChatRoom", fields: ["id"])
  messages: [Message] @connection(keyName: "byChatRoom", fields: ["id"])
}

type Message
  @model
  @auth(rules: [{ allow: owner }, { allow: private, operations: [read] }])
  @key(
    name: "byChatRoom"
    fields: ["chatRoomId", "createdAt"]
    queryField: "messagesByChatRoom"
  ) {
  id: ID!
  content: String!
  userId: ID!
  chatRoomId: ID!
  createdAt: String!
  user: User @connection(fields: ["userId"])
  chatRoom: ChatRoom! @connection(fields: ["chatRoomId"])
}

type Timeline
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [create] }
    ]
  )
  @key(name: "byUser", fields: ["userId"]) {
  id: ID!
  userId: ID!
  postId: ID!
  user: User! @connection(fields: ["userId"])
  post: Post! @connection(fields: ["postId"])
}

type ReportComment @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
  reporterId: ID!
  commentId: ID!
  comment: Comment! @connection(fields: ["commentId"])
  reporter: User! @connection(fields: ["reporterId"])
}

type ReportCommunity @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
  reporterId: ID!
  communityId: ID!
  community: Community! @connection(fields: ["communityId"])
  reporter: User! @connection(fields: ["reporterId"])
}

type ReportUser @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
  reporterId: ID!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  reporter: User! @connection(fields: ["reporterId"])
}

type ReportPost @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
  reporterId: ID!
  postId: ID!
  post: Post! @connection(fields: ["postId"])
  reporter: User! @connection(fields: ["reporterId"])
}
