type Mutation {
  incrementLikePostUserMetrics(id: ID!): UserMetrics
  decrementLikePostUserMetrics(id: ID!): UserMetrics
  incrementLovePostUserMetrics(id: ID!): UserMetrics
  decrementLovePostUserMetrics(id: ID!): UserMetrics
  incrementSupportPostUserMetrics(id: ID!): UserMetrics
  decrementSupportPostUserMetrics(id: ID!): UserMetrics
  incrementDislikePostUserMetrics(id: ID!): UserMetrics
  decrementDislikePostUserMetrics(id: ID!): UserMetrics
  incrementProfileViewUserMetrics(id: ID!): UserMetrics
  decrementProfileViewUserMetrics(id: ID!): UserMetrics
  incrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
  decrementCommentUpvoteUserMetrics(id: ID!): UserMetrics
  incrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
  decrementCommentDownvoteUserMetrics(id: ID!): UserMetrics
  incrementActiveDayUserMetrics(id: ID!): UserMetrics
  decrementActiveDayUserMetrics(id: ID!): UserMetrics
  createPostAndTimeline(
    type: PostType!
    content: String!
    authorId: ID!
    communityId: ID!
    mediaUrl: AWSURL
    poll: [PollInput]
  ): Post
    @function(name: "createPostAndTimeline-${env}")
    @auth(rules: [{ allow: private, provider: userPools }])
}

type User
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  coins: Int!
  followers: [FollowRelationship]
    @connection(keyName: "byFolloweeId", fields: ["id"])
  followees: [FollowRelationship]
    @connection(keyName: "byFollowerId", fields: ["id"])
  communities: [UserCommunityRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  moderatingCommunities: [ModeratorCommunityRelationShip]
    @connection(keyName: "byModerator", fields: ["id"])
  posts: [Post] @connection(keyName: "byAuthor", fields: ["id"])
  comments: [Comment] @connection(keyName: "byAuthor", fields: ["id"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  userCommentMetric: [UserCommentMetricsRelationShip]
    @connection(keyName: "byUser", fields: ["id"])
  chatRooms: [UserChatRoomRelationship]
    @connection(keyName: "byUser", fields: ["id"])
}

type UserMetrics
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  postLikes: Int!
  postLoves: Int!
  postSupports: Int!
  postDislikes: Int!
  profileViews: Int!
  badges: [String]
  commentUpvotes: Int!
  commentDownvotes: Int!
  activeDays: Int!
  lastActiveDay: AWSDate!
  User: User @connection
}

type FollowRelationship
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(
    name: "byFollowerId"
    fields: ["followerId"]
    queryField: "followeesByFollowerId"
  )
  @key(
    name: "byFolloweeId"
    fields: ["followeeId"]
    queryField: "followersByFolloweeId"
  ) {
  id: ID!
  followeeId: ID!
  followerId: ID!
  followee: User! @connection(fields: ["followeeId"])
  follower: User! @connection(fields: ["followerId"])
}

enum CommunityType {
  PUBLIC
  PRIVATE
}

type Community
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String!
  bannerImageUrl: AWSURL!
  profileImageUrl: AWSURL!
  type: CommunityType!
  creatorId: ID!
  creator: User! @connection(fields: ["creatorId"])
  posts: [Post] @connection(keyName: "byCommunity", fields: ["id"])
  members: [UserCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
  moderators: [ModeratorCommunityRelationShip]
    @connection(keyName: "byCommunity", fields: ["id"])
}

type UserCommunityRelationShip
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byUser", fields: ["userId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  userId: ID!
  communityId: ID!
  user: User! @connection(fields: ["userId"])
  community: Community! @connection(fields: ["communityId"])
}

type ModeratorCommunityRelationShip
  @model(queries: null)
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byModerator", fields: ["moderatorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  moderatorId: ID!
  communityId: ID!
  user: User! @connection(fields: ["moderatorId"])
  community: Community! @connection(fields: ["communityId"])
}

enum PostType {
  TEXT
  AUDIO
  VIDEO
  IMAGE
  POLL
}

input PollInput {
  id: ID!
  content: String!
  votes: Int!
}

type Poll {
  id: ID!
  content: String!
  votes: Int!
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
      { allow: private, provider: iam, operations: [create] }
    ]
  )
  @key(name: "byAuthor", fields: ["authorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  type: PostType!
  content: String!
  mediaUrl: AWSURL
  poll: [Poll]
  likes: Int
  loves: Int
  supports: Int
  disLikes: Int
  authorId: ID!
  communityId: ID!
  author: User! @connection(fields: ["authorId"])
  community: Community! @connection(fields: ["communityId"])
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  userPostMetric: [UserPostMetricsRelationShip]
    @connection(keyName: "byPost", fields: ["id"])
}

type UserPostMetricsRelationShip
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byPost", fields: ["postId", "type", "userId"])
  @key(name: "byUser", fields: ["userId", "type", "postId"]) {
  id: ID!
  postId: ID!
  type: String!
  communityId: ID!
  userId: ID!
  community: Community! @connection(fields: ["communityId"])
  post: Post @connection(fields: ["postId"])
  user: User! @connection(fields: ["userId"])
}

type Comment
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byPost", fields: ["postId"])
  @key(name: "byAuthor", fields: ["authorId"])
  @key(name: "byCommunity", fields: ["communityId"]) {
  id: ID!
  content: String!
  postId: ID!
  communityId: ID!
  authorId: ID!
  upvote: Int!
  downvote: Int!
  post: Post @connection(fields: ["postId"])
  author: User! @connection(fields: ["authorId"])
  community: Community! @connection(fields: ["communityId"])
  userCommentMetric: [UserCommentMetricsRelationShip]
    @connection(keyName: "byComment", fields: ["id"])
}

type ParentChildCommentRelationship
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(
    name: "byParentComment"
    fields: ["parentCommentId"]
    queryField: "getChildCommentsByParentCommentId"
  )
  @key(
    name: "byChildComment"
    fields: ["childCommentId"]
    queryField: "getParentCommentByChildCommentId"
  ) {
  id: ID!
  parentCommentId: ID!
  childCommentId: ID!
  parentComment: Comment! @connection(fields: ["parentCommentId"])
  childComment: Comment! @connection(fields: ["childCommentId"])
}

type UserCommentMetricsRelationShip
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byUser", fields: ["userId", "type"])
  @key(name: "byComment", fields: ["commentId", "type"]) {
  id: ID!
  type: String!
  userId: ID!
  postId: ID!
  commentId: ID!
  communityId: ID!
  post: Post @connection(fields: ["postId"])
  user: User! @connection(fields: ["userId"])
  comment: Comment! @connection(fields: ["commentId"])
  community: Community! @connection(fields: ["communityId"])
}

type UserChatRoomRelationship
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(name: "byChatRoom", fields: ["chatRoomId", "userId"])
  @key(name: "byUser", fields: ["userId", "chatRoomId"]) {
  id: ID!
  userId: ID!
  chatRoomId: ID!
  user: User! @connection(fields: ["userId"])
  chatRoom: ChatRoom! @connection(fields: ["chatRoomId"])
}

type ChatRoom
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  users: [UserChatRoomRelationship]
    @connection(keyName: "byChatRoom", fields: ["id"])
  messages: [Message] @connection(keyName: "byChatRoom", fields: ["id"])
}

type Message
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  )
  @key(
    name: "byChatRoom"
    fields: ["chatRoomId"]
    queryField: "messagesByChatRoom"
  ) {
  id: ID!
  content: String!
  userId: ID!
  chatRoomId: ID!
  user: User! @connection(fields: ["userId"])
  chatRoom: ChatRoom! @connection(fields: ["chatRoomId"])
}

type Timeline
  @model
  @auth(
    rules: [
      { allow: owner, provider: userPools, operations: [read, create, update] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  userId: ID!
  postId: ID!
  user: User! @connection(fields: ["userId"])
  post: Post @connection(fields: ["postId"])
}
